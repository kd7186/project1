{"ast":null,"code":"import _objectSpread from \"C:/Users/l6-morning/Documents/work12/project1/src/project1/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"C:/Users/l6-morning/Documents/work12/project1/src/project1/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/l6-morning/Documents/work12/project1/src/project1/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"C:/Users/l6-morning/Documents/work12/project1/src/project1/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n//\n//\n//\n//\n//\n//\n//\n//\nimport { Chart, registerables } from \"chart.js\";\nimport { mapState } from \"vuex\";\nChart.register.apply(Chart, _toConsumableArray(registerables));\nvar chart;\nexport default {\n  props: [\"index\", \"answers\", \"count\"],\n  data: function data() {\n    return {\n      chartData: {\n        labels: this.answers,\n        datasets: [{\n          label: \"data\",\n          data: this.count,\n          backgroundColor: [\"rgba(255, 99, 132, 0.2)\"],\n          borderColor: [\"rgba(255, 99, 132, 1)\"],\n          borderWidth: 1\n        }]\n      },\n      options: {\n        responsive: false,\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.$nextTick(function () {\n                this.createChart();\n              });\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  computed: _objectSpread({}, mapState([\"Response\"])),\n  methods: {\n    createChart: function createChart() {\n      if (chart !== undefined) {\n        chart.destroy();\n      }\n\n      chart = new Chart(this.$refs.barChart, {\n        type: \"bar\",\n        data: this.chartData,\n        options: this.options\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;AASA;AACA;AACAA;AACA;AACA;EACAC,oCADA;EAEAC,IAFA,kBAEA;IACA;MACAC;QACAC,oBADA;QAEAC,WACA;UACAC,aADA;UAEAJ,gBAFA;UAGAK,4CAHA;UAIAC,sCAJA;UAKAC;QALA,CADA;MAFA,CADA;MAaAC;QACAC,iBADA;QAEAC;UACAC;YACAC;UADA;QADA;MAFA;IAbA;EAsBA,CAzBA;EA0BAC,OA1BA,qBA0BA;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAA;cACA;gBACA;cACA,CAFA;;YADA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAIA,CA9BA;EA+BAC,4BACAC,sBADA,CA/BA;EAkCAC;IACAC,WADA,yBACA;MACA;QACAC;MACA;;MACAA;QACAC,WADA;QAEAnB,oBAFA;QAGAQ;MAHA;IAKA;EAVA;AAlCA","names":["Chart","props","data","chartData","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","scales","y","beginAtZero","mounted","computed","mapState","methods","createChart","chart","type"],"sourceRoot":"src/views","sources":["RadioQChart.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <p>{{ this.index + 1 }}번 질문</p>\r\n    <canvas ref=\"barChart\" :height=\"'400px'\" />\r\n    <br />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Chart, registerables } from \"chart.js\";\r\nimport { mapState } from \"vuex\";\r\nChart.register(...registerables);\r\nlet chart;\r\nexport default {\r\n  props: [\"index\", \"answers\", \"count\"],\r\n  data() {\r\n    return {\r\n      chartData: {\r\n        labels: this.answers,\r\n        datasets: [\r\n          {\r\n            label: \"data\",\r\n            data: this.count,\r\n            backgroundColor: [\"rgba(255, 99, 132, 0.2)\"],\r\n            borderColor: [\"rgba(255, 99, 132, 1)\"],\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        responsive: false,\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      },\r\n    };\r\n  },\r\n  async mounted() {\r\n    this.$nextTick(function () {\r\n      this.createChart();\r\n    });\r\n  },\r\n  computed: {\r\n    ...mapState([\"Response\"]),\r\n  },\r\n  methods: {\r\n    createChart() {\r\n      if (chart !== undefined) {\r\n        chart.destroy();\r\n      }\r\n      chart = new Chart(this.$refs.barChart, {\r\n        type: \"bar\",\r\n        data: this.chartData,\r\n        options: this.options,\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>"]},"metadata":{},"sourceType":"module"}